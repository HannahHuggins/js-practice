{"version":3,"sources":["scripts.js"],"names":["ernie","animal","age","breed","bark","console","log","bernie","fruits","prop"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAGA;;AAGA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAGA,IAAMA,KAAK,GAAG;AACVC,EAAAA,MAAM,EAAE,KADE;AAEVC,EAAAA,GAAG,EAAE,GAFK;AAGVC,EAAAA,KAAK,EAAE,KAHG;AAIVC,EAAAA,IAAI,EAAE,gBAAU;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AANS,CAAd;AASAD,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACL,GAAnB;AACAG,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACH,IAAnB;AAGAJ,KAAK,CAACI,IAAN,IAEA;;AAIA,IAAMI,MAAM,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,YAAlB,CAAf;AAEAA,MAAM,CAAC,CAAD,CAAN,EAEA;;AAEAH,OAAO,CAACC,GAAR,CAAYC,MAAM,CAAC,KAAD,CAAlB;AAEAP,KAAK,CAAC,MAAD,CAAL;AAGA,IAAIS,IAAI,GAAG,OAAX;AAEAT,KAAK,CAACS,IAAD,CAAL,EAAa;AAGb;AACA;AACA;AACA;AACA;AACA;AACA;AAGA","file":"scripts.b71a6038.map","sourceRoot":"..","sourcesContent":["// JS and the DOM - using parentNode to traverse up the DOM\n// Dom traversal - selecting and element based on its relationship to another element within the DOM\n\n// Using previousElementSibling and insertbEFORE\n\n\n// NonDocumentTypeChildNode.previousElementSibling - \n\n\n/* previousSibling gets you the previous document node \npreviousElementSibling allows you to get the previous HTML element\n*/\n\n// Object-orientated js \n// class, properties and methods \n// object - info about something you want to use in the code. This contains properties and functions. \n// properties are a series of key-value pairs that hold information about the object. \n//OOP is a way of thinking about and designing a program with objects at it's core. \n// objects are an easy way to store something with properties and manipuilate something using objects. \n\n//------------------------------\n// JavaScript objects \n\n//object literals and components of objects\n\n// Objects are similar to arrays but denoted with {} rather than [] \n\n// const ernie = {\n//     animal: 'dog', //key value pairs\n//     age: 1,\n//     breed: 'pug',\n//     bark: function () {\n//         console.log('woof!'); // This is one way to add methods to object literals\n//     }\n// }\n\n// Encapsulation - putting properties and methods into a package and attaching it to a variable \n\n//---------\n// Dot notation and bracket notation - 2 ways of accessing an objects properties\n\n// const fruits = ['apple', 'pear', 'strawberry'];\n\n// fruitsLength = fruits.length; // able to access the length property of the array and return the value. \n\n\nconst ernie = {\n    animal: 'dog',\n    age: '1',\n    breed: 'pug',\n    bark: function(){\n        console.log(\"woof!\");\n    }\n}\n\nconsole.log(bernie.age);\nconsole.log(bernie.bark);\n\n\nernie.bark();\n\n// accessing properties of an object with dot notation \n\n\n\nconst fruits = ['apple', 'pear', 'strawberry'];\n\nfruits[1];\n\n// bracket notation used to access the properties of an object \n\nconsole.log(bernie['age']);\n\nernie['bark']();\n\n\nvar prop = \"breed\";\n\nernie[prop]; //able to use this now within the ernie object \n\n\n// const me = {\n//     firstName = 'Hannah',\n//     lastName = 'Dowdall',\n//     fullName = function(){\n//         console.log(this.firstName + this.lastName);\n//     }\n// }\n\n\n// changing and adding properties "]}